$variants: (plain, outlined, soft, solid);
$states: (Hover, Active, Disabled);
$drivenProperties: (Color, Bg, Border);
$staticProperties: (borderWidth, borderStyle);

@mixin palette-default($component, $palette: primary) {
}

@mixin variant-default($component, $variant: solid) {
}

@mixin component-state($component, $state) {
    @each $property in $drivenProperties {
        /* prettier-ignore */
        --$(component)-$(property): var(
            --variant-$(state)$(property),
            var(--variant-default$(state)$(property))
        );
    }
}

@mixin component-state-forced($component, $variant, $state) {
    @each $property in $drivenProperties {
        /* prettier-ignore */
        --$(component)-$(property): var(
            --variant-$(variant)$(state)$(property),
            var(--variant-default$(state)$(property))
        );
    }
}

@mixin variant-support($component) {
    @each $property in $staticProperties {
        --$(component)-$(property): var(
            --variant-$(property),
            var(--variant-default-$(property))
        );
    }

    @each $property in $drivenProperties {
        --$(component)-$(property): var(
            --variant-$(property),
            var(--variant-default$(property))
        );
    }
}

@mixin variant-forced($component, $variant) {
    @each $property in $drivenProperties {
        /* prettier-ignore */
        --variant-$(property): var(--palette-$(variant)$(property));

        @each $state in $states {
            /* prettier-ignore */
            --variant-$(state)$(property): var(
                --palette-$(variant)$(state)$(property),
                var(--palette-$(variant)$(property))
            );
        }
    }

    @each $property in $staticProperties {
        --variant-$(property): var(--variant-$(variant)-$(property));
    }
}

@mixin palette-forced($component, $palette) {
    @each $step in $steps {
        /* prettier-ignore */
        --palette-$(step): var(--palette-$(palette)-$(step));
    }

    @each $variant in $variants {
        @each $attribute in $attributes {
            /* prettier-ignore */
            --palette-$(variant)$(attribute): var(
                --palette-$(palette)-$(variant)$(attribute)
            );

            @each $state in $states {
                /* prettier-ignore */
                --palette-$(variant)$(state)$(attribute): var(
                    --palette-$(palette)-$(variant)$(state)$(attribute),
                    var(--palette-$(palette)-$(variant)$(attribute))
                );
            }
        }
    }
}

@mixin style-forced($component, $variant, $palette) {
    @each $property in $drivenProperties {
        /* prettier-ignore */
        --$(component)-$(property): var(
            --palette-$(palette)-$(variant)$(property)
        );

        @each $state in $states {
            /* prettier-ignore */
            --$(component)-$(state)$(property): var(
                --palette-$(palette)-$(variant)$(state)$(property),
                var(--palette-$(palette)-$(variant)$(property))
            );
        }
    }

    @each $property in $staticProperties {
        --$(component)-$(property): var(--variant-$(variant)-$(property));
    }
}

@mixin perspective-symbol($theme, $state, $fill, $stroke) {
    --symbolFill--$(state): var(
        --$(theme)-symbolFill--$(state),
        $(fill)
    ) !important;
    --symbolStroke--$(state): var(
        --$(theme)-symbolStroke--$(state),
        $(stroke)
    ) !important;
}
