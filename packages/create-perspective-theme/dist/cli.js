#!/usr/bin/env node
var q=Object.defineProperty;var B=(e,r)=>{for(var t in r)q(e,t,{get:r[t],enumerable:!0})};import P from"chalk";import{Command as ke}from"commander";import H from"fs-extra";var J=[".DS_Store",".git",".gitattributes",".gitignore",".gitlab-ci.yml",".hg",".hgcheck",".hgignore",".idea",".npmignore",".travis.yml","LICENSE","Thumbs.db","docs","mkdocs.yml","npm-debug.log","yarn-debug.log","yarn-error.log","yarnrc.yml",".yarn"];function b(e){let r=H.readdirSync(e).filter(t=>!J.includes(t)).filter(t=>!/\.iml$/.test(t));return{isEmpty:r.length===0,conflicts:r}}import{execSync as V}from"child_process";import j from"dns";import K from"url";function z(){if(process.env.https_proxy)return process.env.https_proxy;try{let e=V("npm config get https-proxy").toString().trim();return e!=="null"?e:void 0}catch{return}}function k(){return new Promise(e=>{j.lookup("registry.yarnpkg.com",r=>{if(!r)return e(!0);let t=z();if(!t)return e(!1);let{hostname:o}=K.parse(t);if(!o)return e(!1);j.lookup(o,a=>{e(a==null)})})})}var i={};B(i,{blue:()=>s,cliGradient:()=>ee,dimmed:()=>ne,error:()=>oe,info:()=>re,item:()=>ie,loader:()=>te,red:()=>C,warn:()=>ae,yellow:()=>E});import m from"chalk";import Q from"ora";import X from"gradient-string";var A="#0099F7",D="#F11712",Z="#FFFF00",ee=X(A,D),s=m.hex(A),C=m.hex(D),E=m.hex(Z),te=e=>Q({text:e,spinner:{frames:["   ",s(">  "),s(">> "),s(">>>")]}}),re=(...e)=>{console.log(s.bold(">>>"),...e)},oe=(...e)=>{console.error(C.bold(">>>"),...e)},ae=(...e)=>{console.error(E.bold(">>>"),...e)},ne=(...e)=>{console.log(m.dim(...e))},ie=(...e)=>{console.log(s.bold("  \u2022"),...e)};import{default as se}from"execa";async function v(e){let r={env:{COREPACK_ENABLE_STRICT:"0"}},t=!1;try{let o=process.env.npm_config_user_agent;return o&&o.startsWith(e)&&(t=!0),{available:!0,version:(await se(e,["--version"],r)).stdout.trim()}}catch{return{available:t}}}async function c(){let[e,r,t]=await Promise.all([v("yarnpkg"),v("npm"),v("pnpm")]);return{yarn:e,pnpm:t,npm:r}}import pe from"chalk";import le from"update-check";var g={name:"create-perspective-theme",version:"0.1.0-alpha.6",description:"Create a new Perspective theme project.",main:"dist/cli.js",types:"src/cli.ts",type:"module",repository:{type:"git",url:"https://github.com/mussonindustrial/ignition-tools",directory:"packages/create-perspective-theme"},bugs:{url:"https://github.com/mussonindustrial/ignition-tools/issues"},bin:{"create-perspective-theme":"dist/cli.js"},scripts:{build:"tsup-node",test:"vitest run","test:watch":"vitest",lint:"eslint src/**/*.ts","check-types":"tsc --noEmit","lint:prettier":"prettier -c . --cache --ignore-path=../../.prettierignore"},author:"Musson Industrial",license:"MIT",files:["dist"],dependencies:{chalk:"^5.2.0",commander:"^10.0.1","fs-extra":"^11.1.1","gradient-string":"^2.0.2",inquirer:"^9.2.7",ora:"^6.3.1",rimraf:"^5.0.1",semver:"^7.5.1","update-check":"^1.5.4"},devDependencies:{"@perspective-tools/eslint-config-custom":"*","@turbo/workspaces":"^1.10.2","@types/fs-extra":"^11.0.1","@types/gradient-string":"^1.1.2","@types/inquirer":"^9.0.3","cross-spawn":"^7.0.3",eslint:"^8.42.0",execa:"^5.1.1","ignition-tools-tsconfig":"*",tsup:"^6.7.0",typescript:"^5.1.3",vitest:"^0.32.0"}};var me=le(g).catch(()=>null);async function f(){try{(await me)?.latest&&(console.log(),console.log(pe.yellow.bold("A new version of `create-perspective-theme` is available!")),console.log()),process.exit()}catch{}}import I from"path";import L from"fs-extra";import S from"chalk";function u(e){let r=I.resolve(e),t=I.basename(r),o=L.existsSync(r),a=L.lstatSync(r,{throwIfNoEntry:!1});if(a&&!a.isDirectory())return{valid:!1,root:r,projectName:t,error:`${S.dim(t)} is not a directory - please try a different location`};if(o){let{isEmpty:n,conflicts:d}=b(r);if(!n)return{valid:!1,root:r,projectName:t,error:`${S.dim(t)} (${r}) has ${d.length} conflicting ${d.length===1?"file":"files"} - please try a different location`}}return{valid:!0,root:r,projectName:t}}import fe from"path";import R from"chalk";import{getWorkspaceDetails as ue,ConvertError as de}from"@turbo/workspaces";import T from"inquirer";async function _({directory:e}){let r=await T.prompt({type:"input",name:"projectDirectory",message:"Where would you like to create your Perspective theme repo?",when:!e,default:"./my-theme",validate:o=>{let{valid:a,error:n}=u(o);return!a&&n?n:!0},filter:o=>o.trim()}),{projectDirectory:t=e}=r;return u(t)}async function F({packageManager:e,skipTransforms:r}){if(r)return;let t=await c(),o=await T.prompt({name:"packageManagerInput",type:"list",message:"Which package manager do you want to use?",when:!e||!t?.[e]?.available,choices:["npm","pnpm","yarn"].map(n=>({name:n,value:n,disabled:t?.[n]?.available?!1:"not installed"}))}),{packageManagerInput:a=e}=o;return{name:a,version:t[a].version}}var{cliGradient:ye,turboLoader:st,info:he,error:U,warn:be}=i;function O(e){if(e instanceof de&&e.type!=="unknown")U(R.red(e.message)),process.exit(1);else throw e}async function x(e,r,t){let{skipInstall:o,skipTransforms:a}=t;console.log(R.bold(ye(`
>>> Perspective Theme
`))),he("Welcome! Let's get you set up with a new theme project."),console.log();let[n,d]=await Promise.all([k(),c()]);n||(U("You appear to be offline. Please check your network connection and try again."),process.exit(1));let{root:p,projectName:N}=await _({directory:e}),xe=fe.relative(process.cwd(),p)==="",G=await F({packageManager:r,skipTransforms:a});r&&t.skipTransforms&&be("--skip-transforms conflicts with <package-manager>. The package manager argument will be ignored.");let{example:y,examplePath:W}=t,w=y&&y!=="default"?y:"basic",{hasPackageJson:Pe,availableScripts:we,repoInfo:Y}=await createProject({appPath:p,example:w,examplePath:W}),M={};try{M=await ue({root:p})}catch(h){O(h)}if(!a)for(let h of transforms)try{let l=await h({example:{repo:Y,name:w},project:M,prompts:{projectName:N,root:p,packageManager:G},opts:t});l.result==="success"&&tryGitCommit(`feat(create-turbo): apply ${l.name} transform`)}catch(l){O(l)}}var $=new ke;$.name(P.bold(i.cliGradient("create-perspective-theme"))).description("Create a new Perspective theme.").usage(`${P.bold("<project-directory> <package-manager>")} [options]`).argument("[project-directory]").argument("[package-manager]").option("--skip-install","Do not run a package manager install after creating the project",!1).option("-e, --example [name]|[github-url]",`
  An example to bootstrap the app with. You can use an example name
  from the official Turborepo repo or a GitHub URL. The URL can use
  any branch and/or subdirectory
`).option("-p, --example-path <path-to-example>",`
  In a rare case, your GitHub URL might contain a branch name with
  a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
  In this case, you must specify the path to the example separately:
  --example-path foo/bar
`).version(g.version,"-v, --version","Output the current version").helpOption("-h, --help","Display help for command").action(x);$.parseAsync().then(f).catch(async e=>{console.log(),e.command?i.error(`${P.bold(e.command)} has failed.`):(i.error("Unexpected error. Please report it as a bug:"),console.log(e)),console.log(),await f(),process.exit(1)});
